<section class="jumbotron jumbotron-fluid" style="padding-top: 1.5rem; padding-bottom: 1rem;">
  <div class="container">
    <%= form_tag '', id: 'submitFilters' do %>

      <div class="form-group">
        <div class="row">
          <div class="col">
            <%= label_tag 'Show only free events' %>
            <%= check_box_tag :only_free %>
          </div>
          <div class="col">
            <%= label_tag 'Show only night events' %>
            <%= check_box_tag :only_night%>
          </div>
        </div>
      </div>

      <div class="form-group">
        <%= label_tag 'Show events only for genders' %>
        <%= select_tag :genders_only, options_for_select(@genders_arr), class: 'form-control' %>
      </div>

      <div class="form-group">
        <%= label_tag 'Show category' %>
        <%= select_tag :category, options_for_select(get_categories_with_all_arr, -1), class: 'form-control' %>
      </div>

      <%= submit_tag "Apply filters", class: 'btn btn-secondary' %>
    <% end %>
  </div>
</section>

<div class="container">
  <div class="row bg-light" style="padding-bottom: 10px; margin: 0px">
    <div class="col-9 text-left">
      <a class="btn btn-secondary" data-toggle="collapse" href="#mapCollapse" role="button" aria-expanded="false" aria-controls="collapseExample">
        Toggle map
      </a>
    </div>

    <div class="col-3 text-right">
      <select class="form-control" id="display-by">
        <option value="0">Upcoming</option>
        <option value="1">History</option>
      </select>
    </div>
  </div>

  <div class="collapse" id="mapCollapse">
    <div class="card bg-light">
      <div id="mapid"></div>
    </div>
  </div>

  <div class="album py=5 bg-light">
    <div id="closestEvents" class="row" style="padding: 1.5rem">
    </div>
  </div>
  <div class="row justify-content-center">
    <a class="btn btn-primary my-2" id="loadMore">
      Load more
    </a>
  </div>

</div>

<script>
  const defaultCircleRadius = 7500;

  var mymap = null;
  var circle = null;
  var eventsLoadedCount = 0;

  function getRadius()
  {
      if(mymap !== null)
      {
          bounds = mymap.getBounds();
          return mymap.distance(bounds.getNorthWest(), bounds.getSouthWest()) / 3;
      }
      else
      {
          return defaultCircleRadius;
      }
  }

  $('#mapCollapse').on('shown.bs.collapse', function()
  {
      if(mymap === null)
      {
          var onMapZoomed = function()
          {
              circle.setRadius(getRadius());
              removeAllEvents();
              loadEvents(getFilterParams());
          };

          var onMapClicked = function(e)
          {
              circle.setLatLng([e.latlng.lat, e.latlng.lng]);
              removeAllEvents();
              loadEvents(getFilterParams());
          };

          var onLocationGet = function (lat, lng) {
              mymap = addMap('mapid', [lat, lng], 10);
              mymap.setMinZoom(5);
              circle = L.circle([lat, lng], {
                  color: '#ff8031',
                  fillColor: '#ff8f51',
                  fillOpacity: 0.1,
                  radius: defaultCircleRadius
              }).addTo(mymap);
              mymap.on('click', onMapClicked);
              mymap.on('zoomend', onMapZoomed);
          };

          getLocation(onLocationGet, function(){});
      }
  });

  function getFilterParams()
  {
      var temp = [];
      temp.push({name: '<%= :only_free %>', val: $('#<%= :only_free %>').is(':checked')});
      temp.push({name: '<%= :only_night %>', val: $('#<%= :only_night %>').is(':checked')});
      temp.push({name: '<%= :genders_only %>', val: $('#<%= :genders_only %>').val()});
      temp.push({name: '<%= :category %>', val: $('#<%= :category %>').val()});
      temp.push({name: 'display_by', val: $('#display-by').val()});

      extra_params = '?';
      temp.forEach(function(item, id)
      {
          extra_params = extra_params + item.name + '=' + item.val;
          extra_params = extra_params + '&';
      });
      return extra_params;
  }

  $('#display-by').change(function()
  {
      removeAllEvents();
      loadEvents(getFilterParams());
  });

  $('#submitFilters').submit(function()
  {
      removeAllEvents();
      loadEvents(getFilterParams());
      return false;
  });

  function removeAllEvents()
  {
      var myNode = document.getElementById('closestEvents');
      while (myNode.firstChild) {
          myNode.removeChild(myNode.firstChild);
      }
      eventsLoadedCount = 0;
  }

  function loadEvents(extra_params)
  {
      var onEventsReceived = function(events)
      {
          setLoadingButton(false);
          events.forEach(function (item, id) {
              var eventShowHref = '<%= request.base_url + event_show_path('event_id') %>';
              eventShowHref = eventShowHref.replace('/event_id', '/' + item.id);
              var eventEditHref = '<%= request.base_url + edit_event_path('event_id') %>';
              eventEditHref = eventEditHref.replace('/event_id', '/' + item.id);
              getEventCardNode(
                  eventShowHref,
                  eventEditHref,
                  item.is_attending,
                  item.is_free,
                  item.is_night,
                  item.name,
                  item.attendance,
                  item.author_nick,
                  item.description,
                  item.time_to_event_text,
                  item.is_author_event,
                  item.capacity === '' ? null : item.capacity,
                  item.tags,
                  item.is_popular).appendTo(document.getElementById('closestEvents'));
          });
          eventsLoadedCount += events.length;
      };

      var onFail = function()
      {
          console.log('events loading failed');
      };

      setLoadingButton(true);
      getCloseEvents(extra_params, onEventsReceived, onFail);
  }

  function setLoadingButton(isLoading)
  {
      var button = document.getElementById('loadMore');
      if(isLoading)
      {
          if(!button.classList.contains('disabled'))
          {
              button.classList.add('disabled');
          }
          if(!button.contains(document.getElementById('spinner')))
          {
              getSpinnerNode('spinner').appendTo(button);
          }
      }
      else
      {
          if(button.classList.contains('disabled'))
          {
              button.classList.remove('disabled');
          }
          if(button.contains(document.getElementById('spinner')))
          {
              button.removeChild(button.lastChild);
          }
      }
  }

  function getCloseEvents(extra_parameters, onEventsReceived, onFail)
  {
      var onLocationGet = function(lat, lng, radius)
      {
          request = new XMLHttpRequest();

          request.onload = function () {
              var eventsResult = JSON.parse(request.response);
              onEventsReceived(eventsResult);
          };
          url = '<%= request.base_url + url_for(closest_events_path '1000', '1001', '1002', '1003') %>';
          url = url.replace('/1000', '/' + lat);
          url = url.replace('/1001', '/' + lng);
          url = url.replace('/1002', '/' + eventsLoadedCount);
          url = url.replace('/1003', '/' + radius);
          url = url + extra_parameters;
          request.open('GET', url);
          request.send();
      };

      const radius = getRadius();

      if(mymap === null && circle === null)
      {
          getLocation(function(lat, lng)
          {
              onLocationGet(lat, lng, radius);
          },
          onFail);
      }
      else
      {
          onLocationGet(circle.getLatLng().lat, circle.getLatLng().lng, radius);
      }
  }

  $('document').ready(function ()
  {
      loadEvents(getFilterParams());
  });

  $('#loadMore').click(function()
  {
      loadEvents(getFilterParams());
  });
</script>